clear all
f1 = 180e3;
f2 = 500e3;


ws=f1*2*pi;
wp=f2*2*pi;
Amax=1;
Amin= 70;
[nc,Wc] = cheb1ord(wp,ws,Amax,Amin,'s');
[bc,ac] = cheby1(nc,Amax,Wc,'high','s');


[zn,pn,kn] = tf2zp(bc,ac);
n1 = poly([zn(1) zn(2)]);
p1 = poly([pn(1) pn(2)]);

n2 = poly([zn(3) zn(4)]);
p2 = poly([pn(3) pn(4)]);

n3 = poly([zn(5) zn(6)]);
p3 = poly([pn(5) pn(6)]);

t1 = tf(n1,p1);
t2 = tf(n2,p2);
t3 = kn*tf(n3,p3);

%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\vinic\Desktop\Trabalho 1 Síntese\simulacao_filtro.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2023/06/08 19:32:49

%% Initialize variables.
filename = 'C:\Users\vinic\Desktop\Trabalho 1 Síntese\simulacao_filtro.txt';
delimiter = '\t';

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string',  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\.]*)+[\,]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\.]*)*[\,]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains('.')
                thousandsRegExp = '^[-/+]*\d+?(\.\d{3})*\,{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = strrep(numbers, '.', '');
                numbers = strrep(numbers, ',', '.');
                numbers = textscan(char(numbers), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Allocate imported array to column variable names
Freq = cell2mat(raw(:, 1));
Voutput = cell2mat(raw(:, 2));
Pol = cell2mat(raw(:, 3));


%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp;

figure
T=tf(bc,ac);
f=logspace(3,7,500);
h = freqs(bc,ac,2*pi*f);
an=angle(h);
y=20*log10(abs(h));
semilogx(f,y,Freq,Voutput,'--','linewidth',2)
xlabel ( 'Frequência (Hz)' );
ylabel ('Magnitude (dB)');
figure
plot (f,an,Freq,Pol/57.2958);
xlabel ( 'Frequência (Hz)' );
ylabel ('Fase (rad)');